import argparse
import json
import os.path
import datetime
import os
import base64

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

CREDENTIAL_TOKEN_PATH = "CREDENTIAL_TOKEN.b64"
CALENDAR_ID_PATH = "CALENDAR_ID.b64"

#SCOPES
SCOPES = [
    "https://www.googleapis.com/auth/calendar.readonly",
    "https://www.googleapis.com/auth/tasks"
]

def main():
    parser = argparse.ArgumentParser(description='Google Calendar to Tasks converter')
    parser.add_argument('--setup', action='store_true', help='Run in setup mode (generate tokens only)')
    parser.add_argument('--manual', action='store_true', help='Test flow by manually inputting the tokens generated in setup-mode and see if it works')
    args = parser.parse_args()

    if args.setup:
        print("Running in SETUP MODE - generating tokens only")
        setupMode()
    elif args.manual:
        print("Running in MANUAL MODE - Remember to use tokens generated by setup-mode only")
        manualMode()
    else:
        print()
        githubActionMode()

def githubActionMode():
    credentialsJSON = base64.b64decode(os.environ["CREDENTIAL_TOKEN"]).decode('utf-8')
    calendarID = base64.b64decode(os.environ["CALENDAR_ID"]).decode('utf-8')

    credentials = Credentials.from_authorized_user_info(json.loads(credentialsJSON), SCOPES)  # Loads back into proper credentials object and not just JSON

    # Makes sure the creds are fresh
    if credentials and credentials.expired and credentials.refresh_token:
        credentials.refresh(Request())

    events = loadTodayDailyEvents(credentials, calendarID)
    insertIntoTasks(events, credentials)

#Converts the credentials.json to tokens for user to input into actions
def setupMode():
    #Keeps asking user for a correct path to credentials
    while True:
        credentialsPath = input("Please provide path for credentials.json: ").replace("\"", "")
        if os.path.isfile(credentialsPath):
            break
        else:
            print("Path doesn't exist. Please try again.")


    #Keeps asking user for a correct path to calenderID
    while True:
        calendarID = input("Please provide calendar ID:")
        if calendarID.endswith("@group.calendar.google.com"):
            break
        else:
            print("Not a valid calendar ID, it should end with '@group.calendar.google.com'. Please try again.")



    #Manual login from user (Should be one-time only)
    flow = InstalledAppFlow.from_client_secrets_file(credentialsPath, SCOPES)
    credentialsTokenJSON = flow.run_local_server(port=0).to_json()

    #Output for user to copy-paste into GitHub secrets
    with open(CREDENTIAL_TOKEN_PATH, 'wb') as file:
        file.write(base64.b64encode(credentialsTokenJSON.encode('utf-8')))

    with open(CALENDAR_ID_PATH, 'wb') as file:
        file.write(base64.b64encode(calendarID.encode('utf-8')))

    print("\n" + "=" * 60)
    print("GITHUB SECRETS")
    print("Two files have been added under './src/' In GitHub create two Action Repository-secrets (one for each file). The name for the secret MUST be the same as the filename, but without file type. So: 'CREDENTIAL_TOKEN' and 'CALENDAR_ID'")
    print("=" * 60)

def manualMode():
    with open(CREDENTIAL_TOKEN_PATH, 'rb') as file:
        credentialsJSON = base64.b64decode(file.read()).decode('utf-8')

    with open(CALENDAR_ID_PATH, 'rb') as file:
        calendarID = base64.b64decode(file.read()).decode('utf-8')

    credentials = Credentials.from_authorized_user_info(json.loads(credentialsJSON), SCOPES) #Loads back into proper credentials object and not just JSON

    #Makes sure the creds are fresh
    if credentials and credentials.expired and credentials.refresh_token:
        credentials.refresh(Request())

    events = loadTodayDailyEvents(credentials, calendarID)
    insertIntoTasks(events, credentials)
    print("Success! Please check your Tasks for the To-Do list :)")



#Tries to load today's daily events
def loadTodayDailyEvents(credentials, calendarID):
    if not calendarID:
        print("No calendarID provided. Exiting.")
        return

    try:
        service = build("calendar", "v3", credentials=credentials)

        today = datetime.datetime.now().isoformat() + 'Z'  # 'Z' indicates UTC time
        tomorrow = (datetime.datetime.now() + datetime.timedelta(days=1)).isoformat() + 'Z'

        #Calls calendar API
        eventsResult = (
            service.events()
            .list(
                calendarId = calendarID,
                timeMin = today,
                timeMax = tomorrow,
                maxResults = 100,
                singleEvents = True,
                orderBy = "startTime"
            ).execute()
        )
        events = eventsResult.get("items", [])

        if not events:
            print("No tasks for today! Enjoy your day :)")
            exit(0)

        #Returns every "all_day" event
        return [event for event in events if "date" in event["start"]]

    except HttpError as error:
        print(f"An error occurred: {error}")
        return

#Converts the daily events into tasks
def insertIntoTasks(eventsToday, credentials):
    try:
        service = build("tasks", "v1", credentials=credentials)
        #Creates a new list for the day
        todaysList = service.tasklists().insert(body = {
            "title": datetime.datetime.today().strftime("%d-%m-%Y")
        }).execute()

        for event in eventsToday:
            service.tasks().insert(tasklist=todaysList.get("id"), body = {
                "title": event["summary"],
            }).execute()

    except HttpError as error:
        print(f"An error occurred: {error}")

if __name__ == "__main__":
    main()